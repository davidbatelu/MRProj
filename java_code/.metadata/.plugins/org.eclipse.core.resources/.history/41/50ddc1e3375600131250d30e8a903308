package org.myorg;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;


public class Kmeans {
	public static final double measureDistance(Integer[] center, Integer[]  v) {
	  double sum = 0;
	  int length = v.length;
	  for (int i = 0; i < length; i++) {
		  sum += Math.abs(center[i] - v[i]);
	  }
	 
	  return sum;
	}
	public static class KMap extends Mapper<LongWritable, Text, IntWritable, Text> {
		Integer[][] centers;
		public void setup(Context context) throws IOException {
			   System.out.print("In setup");
			   FileSystem fs;
			   try {
					fs = FileSystem.get(new URI("/user/dave"),context.getConfiguration());
					centers = load_centers(fs);
			   } catch (URISyntaxException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
			   }
		   }
		
		public void map(LongWritable key, Text value, Context context) throws InterruptedException, IOException {
			String[] parts = value.toString().split("\t");
			Integer[] row = new Integer[parts.length];
			int i = 0, minIdx = -1;
			for (String part : parts) {
				row[i] = new Integer(part);
				i++;
			}
			double min = 99999999.0;
			for (int c = 0; c < centers.length; c++) {
				double curDst = measureDistance(centers[c], row);
				if (min < curDst) {
					curDst = min;
					minIdx = c;
				}
			}
			context.write(new IntWritable(minIdx), value);
		}
	}
	
	public static class KRed extends Reducer<IntWritable, Text, Text, Text> {
	}
	
	public static void main(String[] args) throws Exception {
		 Configuration conf = new Configuration();
		 long unixTime = System.currentTimeMillis() / 1000L;

		 Job job = new Job(conf, "kmeans");
		 job.setOutputKeyClass(Text.class);
		 job.setOutputValueClass(Text.class);
		 job.setMapperClass(KMap.class);
		 job.setReducerClass(KRed.class);
		 job.setMapOutputKeyClass(IntWritable.class);
		 job.setMapOutputValueClass(Text.class);
		 job.setInputFormatClass(TextInputFormat.class);
		 job.setOutputFormatClass(TextOutputFormat.class);
//		 job.setCombinerClass(CFRed.class);
//					 job.setPartitionerClass(WordPartitioner.class);
//					 job.setNumReduceTasks(5);
		 
		 job.setJarByClass(Kmeans.class);

//	     FileInputFormat.addInputPath(job, new Path(args[0]));
//	     FileOutputFormat.setOutputPath(job, new Path(args[1]));
	     FileInputFormat.addInputPath(job, new Path("/Users/dave/proj/MRProj/output/build_mat/1385316530/part-r-00000"));
	     FileOutputFormat.setOutputPath(job, new Path("/Users/dave/proj/MRProj/output/collab/" + Long.toString(unixTime)));
	     job.waitForCompletion(true);
	 }
}
